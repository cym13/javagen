#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Usage: javagen [-h] [--stdout] [-g] [-s] [-t] [-c classname] (TYPE ATT)...

Arguments:
    TYPE    Attribute type
    ATT     Attribute name

Options:
    -g, --getters           Generate getters
    -s, --setters           Generate setters
    -t, --tostring          Generate toString method
    -c, --class classname   Name of the class
                            Output to the corresponding file
    --stdout                Force output to stdout
"""

from docopt import docopt


def gen_class(classname):
    return "public class %s {" % classname

def constructor(classname, att_list):
    text = "    public %s(" % classname

    for att, att_type in att_list[:-1]:
        text += att_type + " " + att + ", "
    text += att_list[-1][1] + " " + att_list[-1][0]

    text += ") {\n"
    for each in [x[0] for x in att_list]:
        text += "        this.%s = %s;\n" % (each, each)
    text += "    }\n"
    return text

def definition(att, att_type):
    return "    private %s %s;" % (att_type, att)


def getter(att, att_type):
    text = "    public %s get%s() {\n" % (att_type, att[0].upper() + att[1:])
    text+= "        return %s;\n" % att
    text+= "    }\n"
    return text


def setter(att, att_type):
    text = "    public void set%s(%s %s) {\n" % (att[0].upper()+att[1:],
                                                    att_type, att)
    text+= "        this.%s = %s;\n" % (att, att)
    text+= "    }\n"
    return text


def tostring(classname, attributes):
    text      = '    public String toString() {\n'
    text     += '        return "%s("\n' % classname

    for att in attributes[:-1]:
        text += '             + "%s=" + this.%s + ", "\n' % (att, att)

    text     += '             + "%s=" + this.%s + ")";\n' % (attributes[-1],
                                                             attributes[-1])
    text     += "    }\n"
    return text


def main():
    args       = docopt(__doc__)
    class_name = args["--class"]
    setters    = args["--setters"]
    getters    = args["--getters"]
    tostrings  = args["--tostring"]
    nofile     = args["--stdout"]
    att_name   = args["ATT"]
    att_type   = args["TYPE"]
    output     = []

    if class_name:
        output.append(gen_class(class_name))

    for att, att_type in zip(att_name, att_type):
        output.append(definition(att, att_type))

    output.append("")

    if class_name:
        output.append(constructor(class_name, list(zip(att_name,att_type))))

    for att, att_type in zip(att_name, att_type):
        if getters:
            output.append(getter(att, att_type))
        if setters:
            output.append(setter(att, att_type))

    if tostring:
        output.append(tostring(class_name, att_name))

    if class_name:
        output.append("}")

    if nofile:
        print("\n".join(output))
    else:
        with open(class_name + ".java", "w") as f:
            f.write("\n".join(output))
            f.write("\n")

if __name__ == "__main__":
    main()
